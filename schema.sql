CREATE EXTENSION IF NOT EXISTS "pgcrypto";   -- for gen_random_uuid

CREATE TYPE importance_level   AS ENUM ('high', 'medium', 'low');
CREATE TYPE peak_focus_window  AS ENUM ('morning', 'afternoon', 'evening');
CREATE TYPE commute_mode_enum  AS ENUM ('none', 'walk', 'bike', 'public', 'car');
CREATE TYPE block_type_enum    AS ENUM ('event', 'task', 'break');
CREATE TYPE kanban_status      AS ENUM ('backlog', 'todo', 'doing', 'done');

-- Users table (required for foreign key references)
CREATE TABLE IF NOT EXISTS users (
    id           TEXT PRIMARY KEY,            -- Clerk `sub`
    email        TEXT UNIQUE,                 -- Optional, might not be available
    created_at   TIMESTAMPTZ DEFAULT now()
);

/* One‑row per user with long‑term preferences. */
CREATE TABLE IF NOT EXISTS preferences (
    user_id                 TEXT PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    wake_time               TIME        NOT NULL,
    sleep_time              TIME        NOT NULL,
    peak_focus              peak_focus_window NOT NULL,
    break_style             TEXT        NOT NULL,      -- e.g. 'walk', 'stretch'
    break_interval_minutes  INT         NOT NULL,      -- 60 / 90 / 120
    max_work_hours          INT         NOT NULL,      -- daily cap
    commute_mode            commute_mode_enum NOT NULL,
    city                    TEXT        NOT NULL
);

/* Calendar events entered (or imported) by the user. */
CREATE TABLE IF NOT EXISTS events (
    id          UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id     TEXT REFERENCES users(id) ON DELETE CASCADE,
    title       TEXT        NOT NULL,
    start_ts    TIMESTAMPTZ NOT NULL,
    end_ts      TIMESTAMPTZ NOT NULL,
    location    TEXT,
    created_at  TIMESTAMPTZ DEFAULT now(),

    /* Ensure no zero‑length events */
    CONSTRAINT chk_event_duration CHECK (end_ts > start_ts)
);

/* Tasks entered each morning. */
CREATE TABLE IF NOT EXISTS tasks (
    id                UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id           TEXT REFERENCES users(id) ON DELETE CASCADE,
    title             TEXT            NOT NULL,
    duration_minutes  INT             NOT NULL CHECK (duration_minutes > 0),
    importance        importance_level NOT NULL,
    status            kanban_status   NOT NULL DEFAULT 'todo',
    scheduled_time    TIME,                    -- Optional time when user wants to work on this task
    task_date         DATE            NOT NULL DEFAULT CURRENT_DATE,
    created_at        TIMESTAMPTZ     DEFAULT now(),
    updated_at        TIMESTAMPTZ     DEFAULT now()
);

/* Cached daily plan generated by GPT (JSON). */
CREATE TABLE IF NOT EXISTS plans (
    user_id     TEXT REFERENCES users(id) ON DELETE CASCADE,
    plan_date   DATE NOT NULL DEFAULT CURRENT_DATE,
    plan_json   JSONB NOT NULL,                   -- [{start,end,title,type}, …]
    summary     TEXT,                             -- optional 2‑sentence summary
    created_at  TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (user_id, plan_date)
);

/* Game high scores */
CREATE TABLE IF NOT EXISTS game_scores (
    user_id     TEXT PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    score       INT NOT NULL DEFAULT 0,
    created_at  TIMESTAMPTZ DEFAULT now(),
    updated_at  TIMESTAMPTZ DEFAULT now()
);

/* 4️⃣  Helpful Indexes */

/* Fast lookup for today's tasks */
CREATE INDEX IF NOT EXISTS idx_tasks_user_date ON tasks(user_id, task_date);

/* Calendar range queries */
CREATE INDEX IF NOT EXISTS idx_events_user_start ON events(user_id, start_ts);

/* JSONB containment searches (future analytics) */
CREATE INDEX IF NOT EXISTS idx_plans_json_gin ON plans USING gin (plan_json);
